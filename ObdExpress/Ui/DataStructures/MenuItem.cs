using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace ObdExpress.Ui.DataStructures
{
    /// <summary>
    /// Delegate for handling the callback generated by a MenuItem being clicked.
    /// </summary>
    /// <param name="menuItem">A reference to the MenuItem that was clicked.</param>
    public delegate void MenuItemEvent(MenuItem menuItem);

    /// <summary>
    /// Represents an individual item on this application's NavigationMenu.
    /// </summary>
    public class MenuItem : INotifyPropertyChanged
    {
        private string _menuItemId;
        private string _menuItemLabel;
        private string _menuItemIconPath;
        private bool _isSelected;
        private event MenuItemEvent _menuItemEvent;

        /// <summary>
        /// The ID of this Menu Item. This ID should be unique to this particular MenuItem.
        /// </summary>
        public string Id
        {
            get
            {
                return this._menuItemId;
            }
        }

        /// <summary>
        /// The label shown on the button representing this MenuItem.
        /// </summary>
        public string Label
        {
            get
            {
                return this._menuItemLabel;
            }
        }

        /// <summary>
        /// Optional. The path to the icon shown on the button representing this MenuItem.
        /// </summary>
        public string IconPath
        {
            get
            {
                return this._menuItemIconPath;
            }
        }

        /// <summary>
        /// Gets or Sets if this MenuItem is selected. If so, this should be the only item on the NavigationMenu that is selected.
        /// </summary>
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                this._isSelected = value;

                // Update any items monitoring this model
                this.NotifyPropertyChanged("IsSelected");
            }
        }

        /// <summary>
        /// Returns the Event Handler called by the UserControl representing this MenuItem.
        /// </summary>
        public MouseButtonEventHandler Click
        {
            get
            {
                return this.MenuItem_OnClick;
            }
        }

        /// <summary>
        /// Creates a new MenuItem
        /// </summary>
        /// <param name="id">Unique ID representing this MenuItem.</param>
        /// <param name="label">The label to be shown on this MenuItem's corresponding button.</param>
        /// <param name="iconPath">Path to the icon to be shown on this MenuItem's corresponding button. If an empty string is provided, no icon will be shown.</param>
        public MenuItem(string id, string label, string iconPath)
        {
            this._menuItemId = id;
            this._menuItemLabel = label;
            this._menuItemIconPath = iconPath;
        }

        /// <summary>
        /// Creates a new MenuItem (either a menu or menu item)
        /// </summary>
        /// <param name="id">Unique ID representing this MenuItem.</param>
        /// <param name="label">The label to be shown on this MenuItem's corresponding button.</param>
        /// <param name="iconPath">Path to the icon to be shown on this MenuItem's corresponding button. If an empty string is provided, no icon will be shown.</param>
        /// <param name="menuItemEventListener">A MenuItemEvent delegate to handle the Click action of this MenuItem's corresponding button.</param>
        public MenuItem(string id, string label, string iconPath, MenuItemEvent menuItemEventListener) : this(id, label, iconPath)
        {
            if (menuItemEventListener != null)
            {
                this._menuItemEvent += menuItemEventListener;
            }
        }

        /// <summary>
        /// Registers another event listener to this MenuItem's MenuItemEvent. This should only be used by the containing TopMenu object.
        /// For logic that depends on the selection made by the user, listen to the events of the NavigationMenu.
        /// </summary>
        /// <param name="menuItemEventListener">The method listening to this MenuItem's MenuItemEvent.</param>
        public void AddMenuItemEventListener(MenuItemEvent menuItemEventListener)
        {
            this._menuItemEvent += menuItemEventListener;
        }

        /// <summary>
        /// Removes an event listener from this MenuItem's MenuItemEvent.
        /// </summary>
        /// <param name="menuItemEventListener">The method to remove from this MenuItem's MenuItemEvent.</param>
        public void RemoveMenuItemEventListener(MenuItemEvent menuItemEventListener)
        {
            this._menuItemEvent -= menuItemEventListener;
        }

        /// <summary>
        /// Event handler used to register to a specified event of the control that visually represents this MenuItem.
        /// </summary>
        /// <param name="sender">The object that evoked the action being handled.</param>
        /// <param name="e">Any arguments passed along with the action being handled.</param>
        private void MenuItem_OnClick(object sender, MouseEventArgs e)
        {
            // We only want to evoke an action for this MenuItem.
            // Whether it is selected, or not, should be handled at a higher level.
            if (!(this.IsSelected))
            {
                if (this._menuItemEvent != null)
                {
                    this._menuItemEvent(this);
                }
            }
        }

        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged;
        public void NotifyPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
