using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObdExpress.Ui.DataStructures
{
    /// <summary>
    /// Used to indicate what type of event occurred.
    /// </summary>
    public enum NavigationMenuEventType { MENU_MODIFIED, TOPMENU_SELECTED, MENUITEM_SELECTED };

    /// <summary>
    /// Delegate for handling the callback generated by a change in a NavigationMenu.
    /// Most likely, this will be the result of a TopMenuEvent bubbling up to the NavgiationMenu.
    /// </summary>
    /// <param name="navMenu">The NavigationMenu that has experienced a change.</param>
    public delegate void NavigationMenuEvent(NavigationMenu navMenu, NavigationMenuEventType eventType);

    public class NavigationMenu
    {
        private List<TopMenu> _topMenus = new List<TopMenu>();
        private TopMenu _selectedTopMenu = null;
        private event NavigationMenuEvent _navMenuEvent;

        /// <summary>
        /// Default constructor for a new NavigationMenu.
        /// </summary>
        public NavigationMenu()
        {
        }

        /// <summary>
        /// Add another TopMenu to this NavigationMenu.
        /// </summary>
        /// <param name="topMenu">The new TopMenu to be added.</param>
        public void AddTopMenu(TopMenu topMenu)
        {
            // Get an Enumerator for the collection of TopMenus
            IEnumerator<TopMenu> topMenusEnum = this._topMenus.GetEnumerator();

            // Determine if the TopMenu already exists
            while (topMenusEnum.MoveNext())
            {
                if (topMenusEnum.Current.MenuId.Equals(topMenu.MenuId))
                {
                    topMenusEnum.Dispose();
                    throw new ApplicationException("Attempting to add TopMenu with non-unique ID.");
                }
            }

            // Add our TopMenu event handler to the TopMenuEvent for this new menu
            topMenu.AddTopMenuEventListener(this.TopMenuEventHandler);

            // If no matches are found, add the new TopMenu
            this._topMenus.Add(topMenu);

            // If this is the first TopMenu to be added, default it to selected
            if (this._topMenus.Count == 1)
            {
                // Set the TopMenu to selected
                topMenu.IsSelected = true;

                // Store a reference to the selected TopMenu
                this._selectedTopMenu = topMenu;
            }

            // Trigger a NavigationMenuEvent
            if (this._navMenuEvent != null)
            {
                this._navMenuEvent(this, NavigationMenuEventType.MENU_MODIFIED);
            }
        }

        /// <summary>
        /// Removes a TopMenu by its ID.
        /// </summary>
        /// <param name="topMenuId">The ID of the TopMenu to be removed.</param>
        public void RemoveTopMenu(string topMenuId)
        {
            // Get an Enumerator for the collections of TopMenus
            IEnumerator<TopMenu> topMenuItems = this._topMenus.GetEnumerator();

            // Store a reference to the item to be removed
            TopMenu toRemove = null;

            while (topMenuItems.MoveNext())
            {
                // If it does, remove it
                if (topMenuItems.Current.MenuId.Equals(topMenuId))
                {
                    toRemove = topMenuItems.Current;
                    topMenuItems.Dispose();
                    return;
                }
            }

            // If no matching item was found, throw and exception
            if (toRemove == null)
            {
                throw new ApplicationException("No TopMenu with a matching ID was found to be removed.");
            }
            else
            {
                // A match was found, so remove it
                this._topMenus.Remove(toRemove);

                // Trigger a NavigationMenuEvent
                if (this._navMenuEvent != null)
                {
                    this._navMenuEvent(this, NavigationMenuEventType.MENU_MODIFIED);
                }
            }
        }

        /// <summary>
        /// Registers another event listener to this NavigationMenu's NavigationMenuEvent.
        /// </summary>
        /// <param name="navMenuEventListener">The method listening to this NavigationMenu's NavigationMenuEvent.</param>
        public void AddNavigationMenuEventListener(NavigationMenuEvent navMenuEventListener)
        {
            if (navMenuEventListener != null)
            {
                this._navMenuEvent += navMenuEventListener;
            }
        }

        /// <summary>
        /// Removes an event listener from this NavigationMenu's NavigationMenuEvent.
        /// </summary>
        /// <param name="navMenuEventListener">The method to remove from this NavigationMenu's NavigationMenuEvent.</param>
        public void RemoveNavigationMenuEventListener(NavigationMenuEvent navMenuEventListener)
        {
            if (navMenuEventListener != null)
            {
                this._navMenuEvent -= navMenuEventListener;
            }
        }

        /// <summary>
        /// Returns an IEnumerator to enumerate the collection of TopMenus this NavigationMenu contains.
        /// </summary>
        /// <returns>An IEnumerator for the collection of TopMenus.</returns>
        public IEnumerator<TopMenu> GetEnumerator()
        {
            return this._topMenus.GetEnumerator();
        }

        /// <summary>
        /// Subscribe to the events of this NavMenu's TopMenus. We should monitor them and then bubble them upwards via this menu's own NavigationMenuEvent.
        /// </summary>
        /// <param name="topMenu">The TopMenu effecting the event.</param>
        /// <param name="eventType">The type of event handled.</param>
        public void TopMenuEventHandler(TopMenu topMenu, TopMenuEventType eventType)
        {
            // Determine the type of event and handle it accordingly
            switch (eventType)
            {
                // A TopMenu has been modified (buttons added or removed)
                case TopMenuEventType.MENU_MODIFIED:
                    {
                        if (this._navMenuEvent != null)
                        {
                            // Bubble this event upwards
                            this._navMenuEvent(this, NavigationMenuEventType.MENU_MODIFIED);
                        }

                        break;
                    }

                // One of the MenuItems in this TopMenu were selected
                case TopMenuEventType.MENUITEM_SELECTED:
                    {
                        if (this._navMenuEvent != null)
                        {
                            this._navMenuEvent(this, NavigationMenuEventType.MENUITEM_SELECTED);
                        }

                        break;
                    }

                // The TopMenu itself was selected
                case TopMenuEventType.TOPMENU_SELECTED:
                    {
                        // De-select the old TopMenu
                        this._selectedTopMenu.IsSelected = false;

                        // Set the new TopMenu
                        this._selectedTopMenu = topMenu;

                        // Set the newly selected TopMenu to selected
                        this._selectedTopMenu.IsSelected = true;

                        // Bubble the event up
                        if (this._navMenuEvent != null)
                        {
                            this._navMenuEvent(this, NavigationMenuEventType.TOPMENU_SELECTED);
                        }

                        break;
                    }
            }
        }
    }
}
